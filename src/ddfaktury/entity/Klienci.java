package ddfaktury.entity;
// Generated 2011-12-20 15:10:35 by Hibernate Tools 3.2.1.GA

import ddfaktury.ui.Out;
import ddfaktury.ui.Error;
import ddfaktury.utils.HibernateUtil;
import java.util.List;
import java.util.Vector;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 * Klienci generated by hbm2java
 */
public class Klienci  implements java.io.Serializable {

     private Integer id;
     private String nazwa;
     private String miejscowosc;
     private String kod;
     private String adres;
     private String nip;

    public Klienci() {
    }

    public Klienci(String nazwa, String miejscowosc, String kod, String adres, String nip) {
       this.nazwa = nazwa;
       this.miejscowosc = miejscowosc;
       this.kod = kod;
       this.adres = adres;
       this.nip = nip;
    }
   
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    public String getNazwa() {
        return this.nazwa;
    }
    
    public void setNazwa(String nazwa) {
        this.nazwa = nazwa;
    }
    public String getMiejscowosc() {
        return this.miejscowosc;
    }
    
    public void setMiejscowosc(String miejscowosc) {
        this.miejscowosc = miejscowosc;
    }
    public String getKod() {
        return this.kod;
    }
    
    public void setKod(String kod) {
        this.kod = kod;
    }
    public String getAdres() {
        return this.adres;
    }
    
    public void setAdres(String adres) {
        this.adres = adres;
    }
    public String getNip() {
        return this.nip;
    }
    
    public void setNip(String nip) {
        this.nip = nip;
    }

    public static List<Klienci> getAll() {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();
        List result = session.createQuery("from Klienci").list();
        session.getTransaction().commit();
        return result;
    }

    public static List<Klienci> getAllOrder() {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();
        List result = session.createQuery("from Klienci order by nazwa").list();
        session.getTransaction().commit();
        return result;
    }
    
    public static Vector<Klienci> getAllAsVector() {
            Vector tableData = new Vector();

            for(Klienci o : getAll()) {
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(o.getId());
            oneRow.add(o.getNazwa());
            oneRow.add(o.getMiejscowosc());
            oneRow.add(o.getKod());
            oneRow.add(o.getAdres());
            oneRow.add(o.getNip());
            tableData.add(oneRow);
            }
            return tableData;
    }

    public static void add(String nazwa, String miejscowosc, String kod, String adres, String nip) {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();

        Klienci kl = new Klienci(nazwa, miejscowosc, kod, adres, nip);
        session.save(kl);

        session.getTransaction().commit();
    }

    //public static Sprzedawca update(int id, String nazwa, String miejscowosc, String kod, String adres, String nip){
    public static void update(int id, String nazwa, String miejscowosc, String kod, String adres, String nip){
        try{
            Session session = HibernateUtil.getSessionFactory().getCurrentSession();
            session.beginTransaction();

            Klienci kl = new Klienci(nazwa, miejscowosc, kod, adres, nip);
            kl.setId(id);

            session.update(kl);
            session.getTransaction().commit();
            Out.println("Update successfully!");
            }catch(Exception e){
                Error.println(e);
            }
    }

    //public static Sprzedawca update(int id, String nazwa, String miejscowosc, String kod, String adres, String nip){
    public static void update(Klienci kli){
        try{
            Session session = HibernateUtil.getSessionFactory().getCurrentSession();
            session.beginTransaction();

            Klienci kl = new Klienci(kli.getNazwa(), kli.getMiejscowosc(), kli.getKod(), kli.getAdres(), kli.getNip());
            kl.setId(kli.getId());

            session.update(kl);
            session.getTransaction().commit();
            Out.println("Update successfully!");
            }catch(Exception e){
                Error.println(e);
            }
    }

        public static int getNewId() {
            Session session = HibernateUtil.getSessionFactory().getCurrentSession();
            session.beginTransaction();
            List<Klienci> result = session.createQuery("from Klienci order by(id)").list();
            session.getTransaction().commit();
            if(result.size()==0)
                return 0;
            else
                return (result.get(result.size()-1).getId()+1);
        }

    public static Klienci getByID(int numer) {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();
        List<Klienci> result = session.createQuery("from Klienci where id="+numer).list();
        session.getTransaction().commit();
        return result.get(0);
    }

    public static Klienci getByName(String nazwa) {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();
        List<Klienci> result = session.createQuery("from Klienci where nazwa like'"+nazwa+"'").list();
        session.getTransaction().commit();
        return result.get(0);
    }

    public static void deleteByID(int numer) {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();
        Query query = session.createQuery("delete from Klienci where id = "+numer);
        int rowCount = query.executeUpdate();
    }

    public static void clean() {
        for(Klienci o : getAll()) {
            o.setNazwa(replace(o.getNazwa()));
            update(o);
        }
    }

    public static String replace(String text){
        text = text.replaceAll("''", "\"");
        //text = text.replaceAll("", "");
        return text;
    }
}


